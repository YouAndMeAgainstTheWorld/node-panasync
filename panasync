#!/usr/bin/env node

// "requires" used in this file ------------------------------------------------

var path = require('path'), fs = require('fs');
var minimist = require('minimist');
var express = require('express');
var bodyParser = require('body-parser');
var request = require('request');

var nconf = require('nconf');
var util = require('util');

var parseString = require('xml2js').parseString;

// First consider commandline arguments and environment variables, respectively.
nconf.argv().env();

// Then load configuration from a designated file.
nconf.file({ file: 'config.json' });

// Parse command line args, if any ---------------------------------------------

var argv = minimist(process.argv.slice(2));

var port = 8123; // by default
if ('p' in argv) {
  port = parseInt(argv['p']);
}

function exit() {
  process.exit(0);
};

process.on('SIGINT', exit);

// Express server --------------------------------------------------------------
var app = express();

// Parse JSON posted to server
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
})); 


// Static server for the angular.js app
app.use('/', express.static(path.join(__dirname , 'app')));

// A few URLs for front/back end communications --------------------------------
app.get('/dir/:dirname/photos.json', function(req, res){
  res.send(allJpegs[req.params['dirname']]);
});

function testPort(port, host, cb) {
  require('net').createConnection(port, host).on("connect", function(e) {
    cb("success", e); 
  }).on("error", function(e) {
    cb("failure", e);
  });
};

var hosts_up = {};

var testHost = function(ip) {
  if ( ! hosts_up[ip] ) {
    hosts_up[ip] = false;
  }
  testPort(445,ip,function(state,error) {
    if (state == "success") {
      if (! hosts_up[ip] ) {
        console.log("Host now is online ",state);
      }
      hosts_up[ip] = true;      
    } else {
      if ( hosts_up[ip] ) {
        console.log("Host now offline ",state);
      }
      hosts_up[ip] = false;
    }
  });
  return hosts_up[ip];
};

var host_tester = function() {
  setTimeout(function() {
    if ( testHost(nconf.get('nas_host')) && testHost(nconf.get('camera_host')) ) {
      beginSyncing();
    } else {
      stopSyncing();
    }
    setTimeout(arguments.callee,5000);
  },5000);
};

// host_tester();

var tryMounting = function(callback) {
  if ( ! hosts_up[nconf.get('nas_host')] ) {
    callback();
    return;
  }
  require('./osx-mountutils').mount('//'+nconf.get('nas_username')+':'+nconf.get('nas_password')+'@'+nconf.get('nas_host')+'/'+nconf.get('nas_path'),nconf.get('nas_mount_path'),{'fstype':'smbfs'},callback);
};

var tryUnmounting = function(callback) {
  require('./osx-mountutils').umount(nconf.get('nas_mount_path'),false,null,callback);
};

var camera_init = function(callback) {
  var cam_host = nconf.get('camera_host');
  var camera_init_url = 'http://'+cam_host+'/cam.cgi?mode=camcmd&value=playmode';
  request(camera_init_url, function (error, response, body) {
    callback(error,body);
  });
};

var getLatestPhotolist = function(callback) {
  var cam_host = nconf.get('camera_host');
  var camera_init_url = 'http://'+cam_host+'/cam.cgi?mode=get_content_info';
  request(camera_init_url, function (error, response, body) {
    if (!error && response.statusCode == 200) {
      parseString(body,function(err,result) {
        callback(null,parseInt(result.camrply.total_content_number));
      });
    }
  });
};

var syncing = false;

var beginSyncing = function() {
  if (syncing) {
    return;
  }
  syncing = true;
  // tryMounting(function() {
    console.log("Trying to get photos");
    camera_init(function() {
      getLatestPhotolist(function(error,total_count) {
        var photolist = { newest: "1010435", new_photos: [], found: false};
        grepPhotos(photolist,total_count,downloadPhotos);
      });
    });
  // });
};

var get_soap_body = function(index) {
return '<?xml version="1.0" encoding="utf-8"?> \
    <s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">\
    <s:Body>\
    <u:Browse xmlns:u="urn:schemas-upnp-org:service:ContentDirectory:1" xmlns:pana="urn:schemas-panasonic-com:pana">\
    <ObjectID>0</ObjectID>\
    <BrowseFlag>BrowseDirectChildren</BrowseFlag>\
    <Filter>*</Filter>\
    <StartingIndex>'+index+'</StartingIndex>\
    <RequestedCount>50</RequestedCount>\
    <SortCriteria></SortCriteria>\
    <pana:X_FromCP>LumixLink2.0</pana:X_FromCP>\
    </u:Browse>\
    </s:Body>\
    </s:Envelope>';
};

function onlyUnique(value, index, self) { 
    return self.indexOf(value) === index;
};

var convert_items = function(urls) {
  var cleaned_urls = urls.map(function(url) {
    return url.split('/').reverse()[0].replace(/^D[OLT]/,'');
  });
  var file_index = cleaned_urls[0].replace(/\..*/,'');
  var extensions = cleaned_urls.map(function(url) {
    return url.split('.')[1];
  }).filter(onlyUnique);
  return { 'index' : file_index, 'extensions': extensions};
};

var grepPhotos = function(state,total,callback) {
  var cam_host = nconf.get('camera_host');
  console.log(total);
  if (total > 0) {
    var curr_idx = total - 50;
    if (curr_idx < 0) {
      curr_idx = 0;
    }
    request.post( {
      'uri': 'http://'+cam_host+':60606/Server0/CDS_control',
      'headers' : {
        'SOAPACTION' : 'urn:schemas-upnp-org:service:ContentDirectory:1#Browse',
        'Content-Type' : 'text/xml; charset="UTF-8"'
      },
      'body' : get_soap_body(curr_idx)
      }, function(err,resp,body) {
        parseString(body,function(err,result) {
          var images = result['s:Envelope']['s:Body'][0]['u:BrowseResponse'][0].Result[0];
          parseString(images,function(err,result) {
            var items = result['DIDL-Lite'].item;
            var new_items = items.map(function(item) {
              return convert_items(item.res.map(function(re) { return re['_']; }));
            }).reverse();
            while (new_items.length > 0) {
              if (new_items[0].index == state.newest) {
                callback(state.new_photos);
                return;
              }
              state.new_photos.unshift(new_items.shift());
            }
            grepPhotos(state,curr_idx,callback);
          })
        });
      });
  } else {
    callback(state.new_photos);
  }
};

var downloadPhotos = function(photos) {
  var photo = photos[0];
  var extension = photos[0].extensions[0];
  var cam_host = nconf.get('camera_host');
  var len = 0;
  var timestamp = new Date();
  var cur = 0;
  var writer = fs.createWriteStream('P'+photo.index+'.'+extension);
  request
  .get('http://'+cam_host+':50001/DO'+photo.index+'.'+extension)
  .on('response', function(response) {
    console.log(response.statusCode) // 200
    timestamp = new Date(response.headers['x-rec_date_time']);
    len = parseInt(response.headers['x-file_size']);
  }).on('data',function(chunk) {
    cur += chunk.length;
    console.log("Downloading " + (100.0 * cur / len).toFixed(2) + "% ");
  })
  .pipe(writer);

  writer.on('finish',function() {
    fs.utimes('P'+photo.index+'.'+extension,timestamp,timestamp,function() {
      console.log("Done "+photo.index);
    });
    photos[0].extensions.shift();
    if (photos[0].extensions.length < 1) {
      photos.shift();
    }
    if (photos.length > 0) {
      downloadPhotos(photos.slice(0,3));      
    }
  })
}

beginSyncing();

// Fire up the server ----------------------------------------------------------
// var server = app.listen(port, function() {
//     console.log('Listening on port %d', server.address().port);
// });
