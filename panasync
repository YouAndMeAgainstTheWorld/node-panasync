#!/usr/bin/env node

// "requires" used in this file ------------------------------------------------

var path = require('path'), fs = require('fs');
var https = require('https');
var minimist = require('minimist');
var express = require('express');
var bodyParser = require('body-parser');

var nconf = require('nconf');
var util = require('util');

// First consider commandline arguments and environment variables, respectively.
nconf.argv().env();

// Then load configuration from a designated file.
nconf.file({ file: 'config.json' });

// Parse command line args, if any ---------------------------------------------

var argv = minimist(process.argv.slice(2));

var port = 8123; // by default
if ('p' in argv) {
  port = parseInt(argv['p']);
}

function exit() {
  process.exit(0);
};

process.on('SIGINT', exit);

// Express server --------------------------------------------------------------
var app = express();

// Parse JSON posted to server
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
})); 


// Static server for the angular.js app
app.use('/', express.static(path.join(__dirname , 'app')));

app.post('/register',function(req,res) {
    var id = req.body.registration;
    var ids = nconf.get('gcm:client_ids') || [];
    if (ids.indexOf(id) < 0) {
      ids.push(id);
    }
    nconf.set('gcm:client_ids',ids);
    nconf.save();
    res.send({"ok":true});
});

// A few URLs for front/back end communications --------------------------------
app.get('/status.json', function(req, res){
  res.send({
    'available' : camera.available,
    'enabled' : camera.enabled,
    'current' : camera.current,
    'remaining' : camera.batches_remaining,
    'syncing' : camera.syncing,
    'current_complete' : camera.current_complete,
    'latest' : camera.latest
  });
});

var push = require( 'pushover-notifications' );
//var gcm = require('node-gcm');
//var message = new gcm.Message();
//var notifier = new gcm.Sender(nconf.get('gcm:api_key'));

var notifier = new push( {
    token: nconf.get('pushover:token'),
    // onerror: function(error) {},
    // update_sounds: true // update the list of sounds every day - will
    // prevent app from exiting.
});

var notif = function(message,priority) {
  var msg = {
    // These values correspond to the parameters detailed on https://pushover.net/api
    // 'message' is required. All other values are optional.
    message: message,   // required
    priority: priority
  };
  nconf.get('pushover:client_ids').forEach(function(user) {
    msg.user = user;
    notifier.send(msg, function() {});
  });
};

var Camera = require('./camera_control');

var camera = new Camera(nconf.get('camera'));
camera.enabled = false;
camera.auto = true;

camera.on('batchcomplete',function(idx) {
  console.log("Finished batch ",idx,"remaining",camera.batches_remaining);
  camera.latest = idx;
  notif("Batch complete, remaining "+camera.batches_remaining,-1);
  nconf.set('camera:latest',idx);
  nconf.save();
});


camera.on('syncend',function() {
  notif("Completed sync",1);
  console.log("Completed sync");
});

camera.on('available',function(available) {
  console.log("Camera availability is now ",available);
  notif(available? "Camera available" : "Camera not available",-1);
});

var nas_mounter = require('./nas_mounter');

if (nconf.get('nas')) {
  nas_mounter.autoMount(nconf.get('nas'),function(mounted) {
    console.log("Got mounted status",mounted);
    camera.enabled = mounted;
    notif(mounted ? "Have NAS" : "NAS offline", -1);
  });
} else {
  camera.enabled = true;
}

var server_config = {
  'key' : fs.readFileSync('certs/cert.key'),
 'cert' : fs.readFileSync('certs/cert.pem'),
 'ca' : fs.readFileSync('certs/CA.crt')
};

// Fire up the server ----------------------------------------------------------
var server = https.createServer(server_config,app).listen(port, function() {
    console.log('Listening on port %d', server.address().port);
});
